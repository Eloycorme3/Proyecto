/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vista;

import config.ConfigManager;
import controlador.controladorPrincipal;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingWorker;

/**
 *
 * @author eloy.castro
 */
public class ConfigDialog extends javax.swing.JDialog {

    /**
     * Creates new form ConfigDialog
     *
     * @param parent
     * @param modal
     */
    public ConfigDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cargarDatosPrevios();
        txtPasswordConfig.setEchoChar('*');
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtIpConfig = new javax.swing.JTextField();
        txtUserConfig = new javax.swing.JTextField();
        btnCancelarConfig = new javax.swing.JButton();
        btnGuardarConfig = new javax.swing.JButton();
        txtPasswordConfig = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("IP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 0, 15);
        panel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Usuario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 15);
        panel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Contraseña");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 15);
        panel.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 0, 50);
        panel.add(txtIpConfig, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 50);
        panel.add(txtUserConfig, gridBagConstraints);

        btnCancelarConfig.setText("Cancelar");
        btnCancelarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConfigActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 50, 15);
        panel.add(btnCancelarConfig, gridBagConstraints);

        btnGuardarConfig.setText("Guardar");
        btnGuardarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarConfigActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 50, 50);
        panel.add(btnGuardarConfig, gridBagConstraints);

        txtPasswordConfig.setText("jPasswordField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 50);
        panel.add(txtPasswordConfig, gridBagConstraints);

        getContentPane().add(panel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConfigActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarConfigActionPerformed

    private void btnGuardarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarConfigActionPerformed
        // TODO add your handling code here:
        String ip = txtIpConfig.getText().trim();
        String user = txtUserConfig.getText().trim();
        String pass = new String(txtPasswordConfig.getPassword()).trim();
        
        if (ip.isEmpty() || user.isEmpty() || pass.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Faltan Datos", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        txtIpConfig.setEnabled(false);
        txtUserConfig.setEnabled(false);
        txtPasswordConfig.setEnabled(false);
        btnCancelarConfig.setEnabled(false);
        btnGuardarConfig.setEnabled(false);
        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() {
                guardarConfigEnArchivo(ip, user, pass);
                return null;
            }

            @Override
            protected void done() {
                dispose();
            }
        };

        worker.execute();
    }//GEN-LAST:event_btnGuardarConfigActionPerformed

    private void guardarConfigEnArchivo(String ip, String user, String pass) {
        try {
            controladorPrincipal.buildConnection(ip, user, pass);

            Properties props = new Properties();
            props.setProperty("ip", ip);
            props.setProperty("user", user);
            props.setProperty("password", pass);
            try (FileOutputStream fos = new FileOutputStream("./src/main/resources/config.properties")) {
                props.store(fos, "Configuración conexión");
            }

            JOptionPane.showMessageDialog(null, "Configuración guardada correctamente.");
            controladorPrincipal.iniciarSession();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Error al conectar con la base de datos.",
                    "Error de conexión", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarDatosPrevios() {
        try {
            String[] datos = ConfigManager.cargarDatos();
            if (datos != null) {
                txtIpConfig.setText(datos[0]);
                txtUserConfig.setText(datos[1]);
                txtPasswordConfig.setText(datos[2]);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar configuración previa: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public JTextField getTxtIpConfig() {
        return txtIpConfig;
    }

    public void setTxtIpConfig(JTextField txtIpConfig) {
        this.txtIpConfig = txtIpConfig;
    }

    public JPasswordField getTxtPasswordConfig() {
        return txtPasswordConfig;
    }

    public void setTxtPasswordConfig(JPasswordField txtPasswordConfig) {
        this.txtPasswordConfig = txtPasswordConfig;
    }

    public JTextField getTxtUserConfig() {
        return txtUserConfig;
    }

    public void setTxtUserConfig(JTextField txtUserConfig) {
        this.txtUserConfig = txtUserConfig;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarConfig;
    private javax.swing.JButton btnGuardarConfig;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField txtIpConfig;
    private javax.swing.JPasswordField txtPasswordConfig;
    private javax.swing.JTextField txtUserConfig;
    // End of variables declaration//GEN-END:variables

}
